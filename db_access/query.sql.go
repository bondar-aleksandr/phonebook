// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db_access

import (
	"context"
	"database/sql"
)

const addPerson = `-- name: AddPerson :execlastid
INSERT INTO person (first_name, last_name, notes) VALUES (?, ?, ?)
`

type AddPersonParams struct {
	FirstName string
	LastName  string
	Notes     sql.NullString
}

func (q *Queries) AddPerson(ctx context.Context, arg AddPersonParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, addPerson, arg.FirstName, arg.LastName, arg.Notes)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const addPhone = `-- name: AddPhone :exec
INSERT INTO phone (phone_number, phone_type, person_id) VALUES (?, ?, ?)
`

type AddPhoneParams struct {
	PhoneNumber string
	PhoneType   int32
	PersonID    int32
}

func (q *Queries) AddPhone(ctx context.Context, arg AddPhoneParams) error {
	_, err := q.db.ExecContext(ctx, addPhone, arg.PhoneNumber, arg.PhoneType, arg.PersonID)
	return err
}

const deletePersonByFname = `-- name: DeletePersonByFname :execrows
DELETE FROM person WHERE first_name LIKE CONCAT('%', ?, '%')
`

func (q *Queries) DeletePersonByFname(ctx context.Context, concat interface{}) (int64, error) {
	result, err := q.db.ExecContext(ctx, deletePersonByFname, concat)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deletePhoneByNumber = `-- name: DeletePhoneByNumber :execrows
DELETE FROM phone WHERE phone_number LIKE CONCAT('%', ?, '%')
`

func (q *Queries) DeletePhoneByNumber(ctx context.Context, concat interface{}) (int64, error) {
	result, err := q.db.ExecContext(ctx, deletePhoneByNumber, concat)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getAllPersons = `-- name: GetAllPersons :many
SELECT id, first_name, last_name, notes, created, modified FROM person
`

func (q *Queries) GetAllPersons(ctx context.Context) ([]Person, error) {
	rows, err := q.db.QueryContext(ctx, getAllPersons)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Person
	for rows.Next() {
		var i Person
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Notes,
			&i.Created,
			&i.Modified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPersonByFname = `-- name: GetPersonByFname :many
SELECT id, first_name, last_name, notes, created, modified FROM person WHERE first_name LIKE CONCAT('%', ?, '%')
`

func (q *Queries) GetPersonByFname(ctx context.Context, concat interface{}) ([]Person, error) {
	rows, err := q.db.QueryContext(ctx, getPersonByFname, concat)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Person
	for rows.Next() {
		var i Person
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Notes,
			&i.Created,
			&i.Modified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPersonByFullname = `-- name: GetPersonByFullname :many
SELECT id, first_name, last_name, notes, created, modified FROM person WHERE first_name LIKE CONCAT('%', ?, '%') AND last_name LIKE CONCAT('%', ?, '%')
`

type GetPersonByFullnameParams struct {
	CONCAT   interface{}
	CONCAT_2 interface{}
}

func (q *Queries) GetPersonByFullname(ctx context.Context, arg GetPersonByFullnameParams) ([]Person, error) {
	rows, err := q.db.QueryContext(ctx, getPersonByFullname, arg.CONCAT, arg.CONCAT_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Person
	for rows.Next() {
		var i Person
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Notes,
			&i.Created,
			&i.Modified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPersonByID = `-- name: GetPersonByID :one
SELECT id, first_name, last_name, notes, created, modified FROM person WHERE id = ?
`

func (q *Queries) GetPersonByID(ctx context.Context, id int32) (Person, error) {
	row := q.db.QueryRowContext(ctx, getPersonByID, id)
	var i Person
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Notes,
		&i.Created,
		&i.Modified,
	)
	return i, err
}

const getPersonByLname = `-- name: GetPersonByLname :many
SELECT id, first_name, last_name, notes, created, modified FROM person WHERE last_name LIKE CONCAT('%', ?, '%')
`

func (q *Queries) GetPersonByLname(ctx context.Context, concat interface{}) ([]Person, error) {
	rows, err := q.db.QueryContext(ctx, getPersonByLname, concat)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Person
	for rows.Next() {
		var i Person
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Notes,
			&i.Created,
			&i.Modified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPersonIDByPhone = `-- name: GetPersonIDByPhone :many
SELECT person_id FROM phone WHERE phone_number LIKE CONCAT('%', ?, '%')
`

func (q *Queries) GetPersonIDByPhone(ctx context.Context, concat interface{}) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, getPersonIDByPhone, concat)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var person_id int32
		if err := rows.Scan(&person_id); err != nil {
			return nil, err
		}
		items = append(items, person_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPersonPhones = `-- name: GetPersonPhones :many
SELECT phone_number, phone_type FROM phone WHERE person_id = ?
`

type GetPersonPhonesRow struct {
	PhoneNumber string
	PhoneType   int32
}

func (q *Queries) GetPersonPhones(ctx context.Context, personID int32) ([]GetPersonPhonesRow, error) {
	rows, err := q.db.QueryContext(ctx, getPersonPhones, personID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPersonPhonesRow
	for rows.Next() {
		var i GetPersonPhonesRow
		if err := rows.Scan(&i.PhoneNumber, &i.PhoneType); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
